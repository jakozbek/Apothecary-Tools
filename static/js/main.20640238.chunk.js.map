{"version":3,"sources":["abv.png","apothecary.png","components/dilute-alcohol-calc.tsx","components/home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","DiluteAlcoholCalculator","useState","desiredVolume","setDesiredVolume","desiredAbv","setDesiredAbv","currentAbv","setCurrentAbv","waterNeeded","setWaterNeeded","alcoholNeeded","setAlcoholNeeded","useEffect","alcoholNeeds","src","abv","alt","toFixed","type","value","onChange","event","Number","target","to","Home","logo","className","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,wMCiE5BC,MA7Df,WAAoC,IAAD,EAESC,mBAAS,KAFlB,mBAE1BC,EAF0B,KAEXC,EAFW,OAGGF,mBAAS,IAHZ,mBAG1BG,EAH0B,KAGdC,EAHc,OAIGJ,mBAAS,IAJZ,mBAI1BK,EAJ0B,KAIdC,EAJc,OAKKN,mBAAS,GALd,mBAK1BO,EAL0B,KAKbC,EALa,OAMSR,mBAAS,GANlB,mBAM1BS,EAN0B,KAMXC,EANW,KAgBjC,OARAC,qBAAU,WACR,IAAMC,EAAiBT,EAAa,IAAOF,GAAkBI,EAAa,KAC1EK,EAAiBE,GAGjBJ,EADmBP,EAAgBW,KAElC,CAACX,EAAeE,EAAYE,IAG7B,6BACE,yBAAKQ,IAAKC,IAAKC,IAAI,KACnB,uDACA,sGACA,uCACW,6BADX,iBAEiBR,EAAYS,QAAQ,GAFrC,OAE4C,6BAF5C,mBAGmBP,EAAcO,QAAQ,GAHzC,OAKA,+CACgB,6BACd,qDACA,2BACEC,KAAK,SACLC,MAAOb,EACPc,SACE,SAAAC,GAAK,OAAId,EAAce,OAAOD,EAAME,OAAOJ,WAPjD,IASW,6BAET,qDACA,2BACED,KAAK,SACLC,MAAOf,EACPgB,SACE,SAAAC,GAAK,OAAIhB,EAAciB,OAAOD,EAAME,OAAOJ,WAhBjD,IAkBW,6BAET,yDACA,2BACED,KAAK,SACLC,MAAOjB,EACPkB,SACE,SAAAC,GAAK,OAAIlB,EAAiBmB,OAAOD,EAAME,OAAOJ,YAI9C,6BACN,kBAAC,IAAD,CAAMK,GAAG,KAAT,U,iBCzCSC,MAff,WACE,OACE,6BACI,yBAAKX,IAAKY,IAAMC,UAAU,WAAWX,IAAI,SACzC,yBAAKW,UAAU,uBACf,wBAAIA,UAAU,kBACZ,4BACE,kBAAC,IAAD,CAAMH,GAAG,8BAAT,sB,MCQGI,MAbf,WACE,OACE,yBAAKD,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjC,kBAAC,IAAD,CAAOK,KAAK,6BAA6BC,UAAW/B,QCA1CgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAeC,SAAUC,qBACvB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.20640238.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/abv.4919812a.png\";","module.exports = __webpack_public_path__ + \"static/media/apothecary.58faa7ce.png\";","import React, { useState, useEffect } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport abv from '../abv.png';\r\n\r\nfunction DiluteAlcoholCalculator() {\r\n\r\n  const [desiredVolume, setDesiredVolume] = useState(1000);\r\n  const [desiredAbv, setDesiredAbv] = useState(40);\r\n  const [currentAbv, setCurrentAbv] = useState(95);\r\n  const [waterNeeded, setWaterNeeded] = useState(0);\r\n  const [alcoholNeeded, setAlcoholNeeded] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const alcoholNeeds = ((desiredAbv / 100) * desiredVolume) / (currentAbv / 100);\r\n    setAlcoholNeeded(alcoholNeeds);\r\n\r\n    const waterNeeds = desiredVolume - alcoholNeeds;\r\n    setWaterNeeded(waterNeeds)\r\n  }, [desiredVolume, desiredAbv, currentAbv])\r\n\r\n  return (\r\n    <div>\r\n      <img src={abv} alt=\"\"/>\r\n      <h2>Tincture ABV Calculator</h2>\r\n      <p>Enter the values below to calculate what you'll need for your tincture.</p>\r\n      <p>\r\n        Mixture: <br/>\r\n        Water Needed: {waterNeeded.toFixed(2)} mL <br />\r\n        Alcohol Needed: {alcoholNeeded.toFixed(2)} mL\r\n      </p>\r\n      <form>\r\n        Enter Values: <br/>\r\n        <label>Current ABV (%) : </label>\r\n        <input\r\n          type=\"number\"\r\n          value={currentAbv}\r\n          onChange={\r\n            event => setCurrentAbv(Number(event.target.value))\r\n          }>\r\n        </input> <br></br>\r\n\r\n        <label>Desired ABV (%) : </label>\r\n        <input\r\n          type=\"number\"\r\n          value={desiredAbv}\r\n          onChange={\r\n            event => setDesiredAbv(Number(event.target.value))\r\n          }>\r\n        </input> <br></br>\r\n\r\n        <label>Desired Volume (mL) : </label>\r\n        <input\r\n          type=\"number\"\r\n          value={desiredVolume}\r\n          onChange={\r\n            event => setDesiredVolume(Number(event.target.value))\r\n            }>\r\n        </input>\r\n      </form>\r\n            <br/>\r\n      <Link to=\"/\">Home</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DiluteAlcoholCalculator;\r\n","import React from 'react';\r\nimport logo from '../apothecary.png';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Home() {\r\n  return (\r\n    <div>\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <nav className=\"navbar navbar-light\">\r\n        <ul className=\"nav navbar-nav\">\r\n          <li>\r\n            <Link to=\"/dilute-alcohol-calculator\">Calculate ABV</Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { Route , Switch} from 'react-router-dom';\r\nimport DiluteAlcoholCalculator from './components/dilute-alcohol-calc'\r\nimport Home from './components/home';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path='/dilute-alcohol-calculator' component={DiluteAlcoholCalculator} />\r\n        </Switch>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}